let circles = [];
let minDistance = 0;
let numCircles = 8000; // Set the number of circles
let firstCircle; // Declare variables outside the loop
let prevCircle;

function setup() {
  createCanvas(1000, 1000);
  background(0); // Set the background to black
  let circleDiameter = min(width, height) * 0.8; // Diameter of the circle of circles
  let circleRadius = circleDiameter / 2;
  let centerX = width / 2;
  let centerY = height / 2;
  let angleIncrement = TWO_PI / numCircles; // Angle between each circle

  for (let i = 0; i < numCircles; i++) {
    let angle = i * angleIncrement;
    let radius = random(50, circleRadius - 100); // Adjust the maximum radius
    let x = centerX + cos(angle) * radius;
    let y = centerY + sin(angle) * radius;
    let diameter = random(10, 100);
    let circleColor = color(random(255), random(255), random(255)); // Random RGB color

    let validPosition = true;
    for (let j = 0; j < circles.length; j++) {
      let otherCircle = circles[j];
      let distance = dist(x, y, otherCircle.x, otherCircle.y);
      let minDist = (diameter / 2 + otherCircle.diameter / 2) + minDistance;
      if (distance < minDist) {
        validPosition = false;
        break;
      }
    }

    if (validPosition) {
      noStroke(); // Remove the stroke
      fill(circleColor); // Set random RGB fill color
      ellipse(x, y, diameter);
      circles.push({ x, y, diameter });

      // Draw lines to connect to the previous circle (if it exists)
      if (prevCircle) {
        stroke(0); // Set line color to black
        line(x, y, prevCircle.x, prevCircle.y);
      } else {
        // Set the firstCircle if prevCircle doesn't exist
        firstCircle = { x, y, diameter };
      }

      // Update prevCircle to the current circle
      prevCircle = { x, y, diameter };
    }
  }

  // Draw a line connecting the last circle back to the first one to complete the circle
  stroke(0); // Set line color to black
  line(prevCircle.x, prevCircle.y, firstCircle.x, firstCircle.y);
}











